import discord
from discord.ext import commands
import asyncio
from datetime import datetime
from bot.views import TicketManagementView

class TicketSystem:
    def __init__(self, bot, config):
        self.bot = bot
        self.config = config
    
    async def create_ticket(self, interaction: discord.Interaction, reason: str):
        """Cr√©er un nouveau ticket"""
        guild = interaction.guild
        user = interaction.user
        
        # V√©rifier si l'utilisateur a d√©j√† un ticket ouvert
        user_tickets = self.config.db.get_user_open_tickets(user.id)
        
        if user_tickets:
            embed = discord.Embed(
                title="‚ö†Ô∏è Ticket d√©j√† ouvert",
                description="Vous avez d√©j√† un ticket ouvert. Veuillez fermer votre ticket actuel avant d'en cr√©er un nouveau.",
                color=discord.Color.orange()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Cr√©er le salon de ticket
        try:
            # D√©finir les permissions
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=False),
                user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_messages=True)
            }
            
            # Ajouter les permissions pour les r√¥les administrateurs
            settings = self.config.load_settings()
            admin_roles = settings.get("admin_roles", ["Admin", "Mod√©rateur", "Staff"])
            for role in guild.roles:
                if role.name in admin_roles:
                    overwrites[role] = discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_messages=True)
            
            # Cr√©er le salon
            channel_name = f"ticket-{user.name}-{reason.lower().replace(' ', '-')}"
            ticket_channel = await guild.create_text_channel(
                name=channel_name,
                overwrites=overwrites,
                topic=f"Ticket de support pour {user.display_name} - {reason}"
            )
            
            # Sauvegarder les donn√©es du ticket dans la base de donn√©es
            self.config.db.create_ticket(
                channel_id=ticket_channel.id,
                user_id=user.id,
                guild_id=guild.id,
                reason=reason
            )
            
            # Cr√©er le message d'accueil selon la raison
            await self.send_welcome_message(ticket_channel, user, reason)
            
            # R√©pondre √† l'interaction
            embed = discord.Embed(
                title="‚úÖ Ticket cr√©√©",
                description=f"Votre ticket a √©t√© cr√©√©: {ticket_channel.mention}",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except discord.Forbidden:
            embed = discord.Embed(
                title="‚ùå Erreur de permissions",
                description="Je n'ai pas les permissions n√©cessaires pour cr√©er un salon de ticket.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå Erreur",
                description=f"Une erreur est survenue lors de la cr√©ation du ticket: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
    
    async def send_welcome_message(self, channel, user, reason):
        """Envoyer le message d'accueil selon la raison du ticket"""
        
        # Embed principal
        embed = discord.Embed(
            title=f"üéüÔ∏è Ticket de support - {reason}",
            description=f"Bonjour {user.mention}, merci d'avoir cr√©√© un ticket de support.",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        embed.set_thumbnail(url=user.display_avatar.url)
        
        # Message personnalis√© selon la raison
        if reason.lower() == "v√©rification":
            embed.add_field(
                name="üîê Processus de v√©rification",
                value="Pour la v√©rification tu as 2 options :\n\n"
                      "1Ô∏è‚É£ Une photo de toi avec ton pseudo, nom de compte, nom du serveur et date + vocale\n\n"
                      "2Ô∏è‚É£ Demander un vocale avec l'un des membres des membres faisant partie du STAFF et activit√© cam√©ra pour nous dire ton pseudo, nom de compte, nom du serveur et date\n\n"
                      "-# (Nous pr√©f√©rons la deuxi√®me options, en cas de doute, nous pouvons te demand√© d'√©crire autre chose)",
                inline=False
            )
        elif reason.lower() == "questions":
            embed.add_field(
                name="‚ùì Questions",
                value="D√©cris nous ta question, nous te r√©pondrons dans les plus brefs d√©lais",
                inline=False
            )
        elif reason.lower() == "achat":
            embed.add_field(
                name="üí∞ Achat",
                value="Mentionnes la princesse et attends sa r√©ponse, elle te repondra dans les plus bref d√©lais",
                inline=False
            )
        elif reason.lower() == "autre":
            embed.add_field(
                name="üéüÔ∏è Autre",
                value="D√©cris nous ton probl√®me, nous traiterons ta demande au plus vite.",
                inline=False
            )
        else:
            embed.add_field(
                name="üÜò Support",
                value="D√©cris ton probl√®me nous te r√©pondront dans les meilleurs d√©lais",
                inline=False
            )
        
        embed.add_field(
            name="üìû Contact",
            value="Notre √©quipe de support vous r√©pondra bient√¥t. En attendant, n'h√©sitez pas √† fournir tous les d√©tails n√©cessaires.",
            inline=False
        )
        
        embed.set_footer(text="Support Ticket ‚Ä¢ R√©ponse rapide")
        
        # Mentionner les r√¥les de support
        guild_config = self.config.get_guild_config(interaction.guild.id)
        support_roles = guild_config.get("support_roles", [])
        
        mention_text = ""
        if support_roles:
            mentions = []
            for role_id in support_roles:
                role = interaction.guild.get_role(int(role_id))
                if role:
                    mentions.append(role.mention)
            if mentions:
                mention_text = " ".join(mentions)
        
        # Vue de gestion du ticket
        view = TicketManagementView(self)
        
        # Envoyer le message d'accueil
        await channel.send(embed=embed, view=view)
        
        # Envoyer les mentions s√©par√©ment si n√©cessaire
        if mention_text:
            await channel.send(mention_text)
    
    async def close_ticket(self, channel, closed_by):
        """Fermer un ticket"""
        # Fermer le ticket dans la base de donn√©es
        ticket = self.config.db.close_ticket(channel.id, closed_by.id)
        
        if ticket:
            
            # Modifier les permissions pour fermer le ticket
            overwrites = channel.overwrites
            for target, overwrite in overwrites.items():
                if isinstance(target, discord.Member) and target.id == tickets_data[channel_id]["user_id"]:
                    overwrite.send_messages = False
                    await channel.set_permissions(target, overwrite=overwrite)
            
            # Message de fermeture
            embed = discord.Embed(
                title="üîí Ticket ferm√©",
                description=f"Ce ticket a √©t√© ferm√© par {closed_by.mention}.\n"
                           f"Si vous avez besoin d'aide suppl√©mentaire, cr√©ez un nouveau ticket.",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            embed.set_footer(text="Ticket ferm√©")
            
            await channel.send(embed=embed)
    
    async def delete_ticket(self, channel):
        """Supprimer un ticket"""
        tickets_data = self.config.load_tickets()
        channel_id = str(channel.id)
        
        if channel_id in tickets_data:
            # Marquer comme supprim√©
            tickets_data[channel_id]["status"] = "deleted"
            tickets_data[channel_id]["deleted_at"] = datetime.now().isoformat()
            self.config.save_tickets(tickets_data)
        
        # Supprimer le salon apr√®s un court d√©lai
        await asyncio.sleep(2)
        try:
            await channel.delete()
        except discord.NotFound:
            pass  # Le salon a d√©j√† √©t√© supprim√©
        except discord.Forbidden:
            print(f"Pas de permission pour supprimer le salon {channel.name}")
    
    async def handle_button_interaction(self, interaction):
        """G√©rer les interactions des boutons (fallback si n√©cessaire)"""
        # Cette m√©thode est un fallback au cas o√π on aurait besoin de g√©rer
        # des interactions de boutons sp√©ciales
        pass
